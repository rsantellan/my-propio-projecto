<?php

/**
 * mdLocacion
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    rentNchill
 * @subpackage model
 * @author     maui
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class mdLocacion extends BasemdLocacion
{
	/**
	 * retorna la clase, se usa para los behaviors
	 *
	 * @return void
	 * @author maui .-
	 **/
	public function getObjectClass()
	{
		return 'mdLocacion';
	}
	
	public function __toString(){
		return $this->getNombre();
	}
	
	/**
	 * retorna el src del avatar de 50px. Se usa en el list del backend
	 *
	 * @return void
	 * @author maui .-
	 **/
	public function getAvatar50()
	{
		return $this->retrieveAvatar(array(mdWebOptions::WIDTH =>50 , mdWebOptions::HEIGHT =>50 , mdWebOptions::CODE => mdWebCodes::CROPRESIZE ));
	}
	
	public function  postSave($event) {
       parent::postSave($event);
       $manager = mdMediaManager::getInstance(mdMediaManager::MIXED, $this)->load();
       
       if(!$manager->hasAlbum("promos"))
       {
           $params1 = array(
               "title" => "promos",
               "description" => "Album para los promocionales",
               "type" => mdMediaManager::MIXED,
           );
           $manager->createAlbum($params1);
       }

			if(!$manager->hasAlbum("default"))
       {
           $params = array(
               "title" => "default",
               "description" => "",
               "type" => mdMediaManager::MIXED,
           );
           $manager->createAlbum($params);
       }
       
   }

	public function getSlug(){
		return mdBasicFunction::slugify($this->getNombre());
	}

	public function esTemporadaAlta($date = null){
		if($date = null)
			$date = new DateTime();
		$q = $this->getTemporadaQuery($date);
			
		$results = $q->execute();
		
		if(count($results)>0)
			return true;
		
		return false;
		
	}
	
	public function getTemporada($date = null){
		if($date = null)
			$date = new DateTime();

		$q = $this->getTemporadaQuery($date);
		$results = $q->execute();
		if($results)
        {
          $aux = $results->getFirst();
          var_dump($aux->toArray());
          die;
          return $results->getFirst();
        }
		return false;
	}
	
	
	/**
	 * devuelve los apartamentos de la locacion
	 * Opciones:
	 * 		limit
	 * 		order
	 * 		orderDirection = asc
	 *
	 * @return void
	 * @author maui .-
	 **/
	public function getApartamentos($options=array())
	{
		$q = Doctrine::getTable('mdApartamento')->createQuery('a')->where('a.md_locacion_id=?', $this->getId())->andWhere('a.activo=1');

		if(isset($options['limit']))
			$q->limit($options['limit']);

		if(isset($options['order']))
			$q->orderBy($options['order'] . ' ' . (isset($options['orderDirection'])?$options['orderDirection']:''));

		if(isset($options['returnQuery']))
			return $q;

		return $q->execute();
		
	}
	
	
	private function getTemporadaQuery($date){
		//TENGO QUE HACER UN BETWEEN ARMANDO LAS FECHAS USANDO EL ANO ACTUAL
		
		if (get_class($date) == 'DateTime'){
			$mes = $date->format('m');
			$dia = $date->format('d');
		}else{
			$mes = date('m',$date);
			$dia = date('d',$date);
		}
		$q = Doctrine::getTable('mdLocacionTemporada')->createQuery('mlt')
			->where('mlt.md_locacion_id = ?', $this->getId())
			->andWhere('mlt.mes_desde <= ?', $mes)
			->andWhere('mlt.mes_hasta >= ?', $mes);
		return $q;
	}
	
	
}
